#!/bin/bash
# aarch64 Toolchain Environment Configuration
# Source this file before building to ensure all toolchains target aarch64

# Core architecture settings
export ARCH="aarch64"
export TARGET_ARCH="aarch64"
export CONFIG_ARCH="aarch64"
export REAL_GNU_TARGET_NAME="aarch64-openwrt-linux-musl"
export GNU_TARGET_NAME="aarch64-openwrt-linux-musl"

# Optimization flags for Cortex-A53 (common in N1 devices)
export TARGET_OPTIMIZATION="-O2 -pipe -mcpu=cortex-a53 -mtune=cortex-a53"
export CFLAGS="-O2 -pipe -mcpu=cortex-a53 -mtune=cortex-a53 -fstack-protector-strong"
export CXXFLAGS="-O2 -pipe -mcpu=cortex-a53 -mtune=cortex-a53 -fstack-protector-strong"
export LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--gc-sections"

# Go toolchain configuration
export GOOS="linux"
export GOARCH="arm64"
export CGO_ENABLED=1
export GO_ARCH="arm64"
export GO_OS="linux"
export GO_OS_ARCH="linux_arm64"

# Rust toolchain configuration
export CARGO_BUILD_TARGET="aarch64-unknown-linux-musl"
export RUSTC_TARGET_ARCH="aarch64-unknown-linux-musl"
export RUSTFLAGS="-C target-cpu=cortex-a53 -C target-feature=+neon -C link-arg=-fuse-ld=bfd"
export CARGO_RUSTFLAGS="-C target-cpu=cortex-a53 -C target-feature=+neon -mno-outline-atomics -C link-arg=-fuse-ld=bfd"

# Cross-compilation toolchain
export CROSS_COMPILE="aarch64-openwrt-linux-musl-"
export CC="aarch64-openwrt-linux-musl-gcc"
export CXX="aarch64-openwrt-linux-musl-g++"
export AR="aarch64-openwrt-linux-musl-ar"
export STRIP="aarch64-openwrt-linux-musl-strip"
export RANLIB="aarch64-openwrt-linux-musl-ranlib"
export NM="aarch64-openwrt-linux-musl-nm"
export OBJCOPY="aarch64-openwrt-linux-musl-objcopy"
export OBJDUMP="aarch64-openwrt-linux-musl-objdump"

# Compiler-specific optimizations for aarch64
export CC_FOR_TARGET="aarch64-openwrt-linux-musl-gcc"
export CXX_FOR_TARGET="aarch64-openwrt-linux-musl-g++"
export TARGET_CC_NOCACHE="aarch64-openwrt-linux-musl-gcc"
export TARGET_CXX_NOCACHE="aarch64-openwrt-linux-musl-g++"

# Additional optimization flags
export TARGET_CFLAGS="-O2 -pipe -mcpu=cortex-a53 -mtune=cortex-a53 -fstack-protector-strong"
export TARGET_CXXFLAGS="-O2 -pipe -mcpu=cortex-a53 -mtune=cortex-a53 -fstack-protector-strong"
export TARGET_LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--gc-sections"

# Linker configuration
export TARGET_LINKER="bfd"

# Misc toolchain settings
export PKG_CONFIG_PATH=""
export PKG_CONFIG_LIBDIR=""

echo "aarch64 toolchain environment configured"
echo "Target: $REAL_GNU_TARGET_NAME"
echo "Go: $GOOS/$GOARCH"
echo "Rust: $RUSTC_TARGET_ARCH"
echo "Linker: $TARGET_LINKER"
echo "Optimizations: $TARGET_OPTIMIZATION"